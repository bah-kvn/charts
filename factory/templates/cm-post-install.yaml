---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Release.Name }}-post-install"
  namespace: "flux-system"
  labels:
    app.kubernetes.io/instance: {{ .Release.Namespace | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | quote  }}
    app.kubernetes.io/part-of: "factory"
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": "before-hook-creation"
data:
  post-install: |
    #!/bin/sh
    until (kubectl get ns istio-system &> /dev/null ) do sleep 1 ; echo -n '.';  done
    {{ if .Values.certManager.enabled }}
    kubectl rollout status deploy/cert-manager-cert-manager -n cert-manager
    kubectl rollout status deploy/cert-manager-cert-manager-cainjector -n cert-manager
    kubectl rollout status deploy/cert-manager-cert-manager-webhook -n cert-manager
    kubectl apply -f /local/yaml/cluster-issuer/cluster-issuer.yaml
    kubectl apply -f /local/yaml/cert/certificate.yaml
    {{ end }}
    until (kubectl get deploy public-ingressgateway -n istio-system &> /dev/null ) do sleep 1 ; echo -n '.';  done
    {{ if .Values.certManager.enabled }} kubectl rollout status deploy/cert-manager-cert-manager -n cert-manager{{ end }}
    kubectl rollout status deploy/public-ingressgateway -n istio-system
    {{ if .Values.rancher.enabled }} kubectl apply -f /local/yaml/rancher/vs-rancher.yaml {{ end }}
    {{ if .Values.longhorn.enabled }} kubectl apply -f /local/yaml/longhorn/vs-longhorn.yaml {{ end }}
    sleep 5 {{ if .Values.certManager.enabled }}
  certificate: |
    ---
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: "public-cert"
      namespace: "istio-system"
    spec:
      dnsNames:
      - "*.{{ .Values.cluster.domain}}"
      - {{ .Values.cluster.domain }}
      issuerRef:
      {{if .Values.cluster.staging_cert }}
        name: "letsencrypt-staging"
      {{ else }}
        name: "letsencrypt-production"
      {{end}}
        kind: ClusterIssuer
      secretName: "public-cert"

  cluster-issuer: |
    --- 
    apiVersion: cert-manager.io/v1
    kind: ClusterIssuer
    metadata:
      annotations:
        "helm.sh/hook": "post-install"
        "helm.sh/hook-weight": "10"
        "helm.sh/hook-delete-policy": "before-hook-creation"
      labels:
        app: "rancher"
        app.kubernetes.io/instance: {{ .Release.Namespace | quote }}
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/version: {{ .Chart.AppVersion | quote  }}
        app.kubernetes.io/part-of: "cert-manager"
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      name: "letsencrypt-staging"
      namespace: {{ .Values.certManager.namespace }}
    spec:
      acme:
        server: "https://acme-staging-v02.api.letsencrypt.org/directory"
        email: {{ .Values.letsEncrypt.email }}
        privateKeySecretRef:
          name: "letsencrypt-staging"
        solvers:
        - selector:
            dnsZones:
              - {{ .Values.cluster.domain }}
          dns01:
            route53:
              region: {{ .Values.cluster.aws_region | quote }}
              hostedZoneID: {{ .Values.cluster.hosted_zone_id | quote }}
    --- 
    apiVersion: cert-manager.io/v1
    kind: ClusterIssuer
    metadata:
      annotations:
        "helm.sh/hook": "post-install"
        "helm.sh/hook-weight": "10"
        "helm.sh/hook-delete-policy": "before-hook-creation"
      labels:
        app: "rancher"
        app.kubernetes.io/instance: {{ .Release.Namespace | quote }}
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/version: {{ .Chart.AppVersion | quote  }}
        app.kubernetes.io/part-of: "cert-manager"
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      name: "letsencrypt-production"
      namespace: {{ .Values.certManager.namespace }}
    spec:
      acme:
        server: "https://acme-v02.api.letsencrypt.org/directory"
        email: {{ .Values.letsEncrypt.email }}
        privateKeySecretRef:
          name: "letsencrypt-production"
        solvers:
        - selector:
            dnsZones:
              - {{ .Values.cluster.domain }}
          dns01:
            route53:
              region: {{ .Values.cluster.aws_region | quote }}
              hostedZoneID: {{ .Values.cluster.hosted_zone_id | quote }}
{{ end }}


  {{ if .Values.longhorn.enabled }}
  vs-longhorn: |
    apiVersion: networking.istio.io/v1beta1
    kind: VirtualService
    metadata:
      annotations:
        helm.sh/hook: "post-install"
        helm.sh/hook-delete-policy: "before-hook-creation"
        helm.sh/hook-weight: "10"
      labels:
        app: "longhorn"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/part-of: "longhorn"
        app.kubernetes.io/version: "1.16.0"
        helm.sh/chart: "factory-0.1.0"
      name: "longhorn"
      namespace: "longhorn-system"
    spec:
      gateways:
      - "istio-system/public"
      hosts:
      - "longhorn.{{ .Values.cluster.domain }}"
      http:
      - route:
        - destination:
            host: "longhorn-frontend.longhorn-system.svc.cluster.local"
            port:
              number: 80
  {{ end }}

  {{ if .Values.rancher.enabled }}
  vs-rancher: |
    apiVersion: networking.istio.io/v1beta1
    kind: VirtualService
    metadata:
      annotations:
        "helm.sh/hook": "post-install"
        "helm.sh/hook-weight": "10"
        "helm.sh/hook-delete-policy": "before-hook-creation"
      labels:
        app: "rancher"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/part-of: "rancher"
        helm.sh/chart: "factory-0.1.0"
      name: "rancher"
      namespace: "cattle-system"
    spec:
      gateways:
      - "istio-system/public"
      hosts:
      - "rancher.{{ .Values.cluster.domain }}"
      http:
      - route:
        - destination:
            host: "cattle-system-rancher.cattle-system.svc.cluster.local"
            port:
              number: 80
  {{ end }}

